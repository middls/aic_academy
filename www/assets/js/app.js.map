{"version":3,"sources":["app.js"],"names":["onEntry","entry","forEach","change","isIntersecting","add","options","threshold","observer","IntersectionObserver","elements","document","querySelectorAll","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","elm","value","observe"],"mappings":"aACA,SAASA,QAAQC,GAAjBA,EAAAC,QAAA,SAAiBD,GACVE,EAACD,gBACJC,EAAGA,OAAOC,UAAVC,IAA0B,aAO9B,IAAIC,QAAU,CAAdC,UAAW,CAAG,IAIVC,SAAW,IAAIC,qBAAqBT,QAASM,SASjDI,SAAAC,SAAAC,iBAAA,8SAI0B,IAAA,IAAAC,MAAAC,UAAAJ,SAAAK,OAAAC,cAAAC,2BAAAJ,MAAAC,UAAAI,QAAAC,MAAAF,2BAAA,EAAA,CAAA,IAAjBG,IAAiBP,MAAAQ,MACxBb,SAAAA,QAASc","file":"app.js","sourcesContent":["\r\nfunction onEntry(entry) {\r\n  entry.forEach((change) => {\r\n    if(change.isIntersecting) {\r\n      change.target.classList.add('visible');\r\n    }\r\n  });\r\n}\r\n\r\n// список опций\r\nlet options = {\t\r\n  threshold: [1]\r\n};\r\n\r\nlet observer = new IntersectionObserver(onEntry, options);\r\n\r\n\r\n\r\nlet elements = document.querySelectorAll('.header-wrapper__content__heading,'+' .header-wrapper__content__description, ' +' .head-block__heading, .content-block__description, ' +' .content-block__description__list__item, ' +'.lol, .right-block__heading, .right-block__description');\r\n\r\n// let elements = document.querySelectorAll(\r\n// \t`.header-wrapper__content__heading, .header-wrapper__content__description,\r\n// \t .head-block__heading, .content-block__description,\r\n// \t .content-block__description__list__item, \r\n// \t.lol, .right-block__heading, .right-block__description`);\r\n\r\n\r\nfor (let elm of elements) {\r\n  observer.observe(elm);\r\n}\r\n\r\n"]}